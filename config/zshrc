# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="frisk"

# Set this theme up later, needs powerline font hacking
#ZSH_THEME="agnoster"
#DEFAULT_USER="sensae"

# zsh settings
# unsetopt nomatch
COMPLETION_WAITING_DOTS="true"

# Output helper functions to make colorizing shell output more expressive
function green  { echo "\033[32m$1\033[0m" }
function yellow { echo "\033[33m$1\033[0m" }
function red    { echo "\033[31m$1\033[0m" }

# ------------------------------------------------------------------------------
## Platform specific environment configuration
# ------------------------------------------------------------------------------

case $(uname -s) in
  Linux)
    export OS="linux"
    if [ $(lspci | grep -i virtualbox | wc -l) -gt 0 ]; then
      echo "Virtualbox guest detected, not enabling certain options."
    else
      plugins=(git)
    fi
    export PATH=$PATH:/usr/local/bin:/usr/bin:/bin
    export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
    export PATH=$PATH:$HOME/software/keyringer
    export PATH=$PATH:$HOME/software/fgallery-1.8.2
    export PATH=$PATH:/usr/bin/core_perl
    if [ -d '/home/sensae/opt/android-studio' ]
    then
      export PATH=$PATH:/home/sensae/opt/android-studio/bin
      export PATH=$PATH:/home/sensae/opt/android-studio/sdk/platform-tools
      export PATH=$PATH:/home/sensae/opt/android-studio/sdk/tools
    fi
    if [ $(which keychain &> /dev/null) ]
    then
      eval $(keychain --eval --agents ssh -Q --quiet id_rsa)
    fi

    # Detect distro and export it in a variable
    if [ -e /etc/debian_version ]
    then
      export DISTRO="debian"
    elif [ -e /etc/arch-release ]
    then
      export DISTRO="arch"
    fi
  ;;
  Darwin)
    export OS="darwin"
    plugins=(git macos)
    export PATH=$PATH:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
    export PATH=$PATH:/usr/local/git/bin:/usr/X11/bin
    export PATH=$PATH:/opt/homebrew/anaconda3/bin/
    source /Volumes/Exodrive/Code/Dreamcast/kos/environ.sh
  ;;
  *)
    OS="unknown"
    echo "Warning: Unable to detect operating system type."
  ;;
esac

# ------------------------------------------------------------------------------
## Global environment configuration
# ------------------------------------------------------------------------------

# Man page colorization
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

source $ZSH/oh-my-zsh.sh

# Security related stuff
umask 027

# Local user bin directory
if [ -d "$HOME/bin" ]
then
  PATH=$HOME/bin:$PATH # This entry is first for load order reasons
fi

#rvm
export PATH=$HOME/.rvm/bin:$PATH
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

#$editor
if [ -e $(which vim &> /dev/null) ]
then
  export EDITOR=vim
fi

#save current working directory
function cd {
  builtin cd $@
  pwd > ~/.last_dir
}

# restore current working directory on shell load
# Disabled this for now, is more trouble than its worth
#if [ -f ~/.last_dir ]
#then
#  cd `cat ~/.last_dir`
#fi

#z
. $HOME/bin/z.sh
function precmd () {
  z --add "$(pwd -P)"
}

#ssh-agent
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
  ssh-agent > "$XDG_RUNTIME_DIR/ssh-agent.env"
  ssh-add
fi
if [[ ! "$SSH_AUTH_SOCK" ]]; then
  eval "$(<"$XDG_RUNTIME_DIR/ssh-agent.env")"
fi

# ------------------------------------------------------------------------------
## User helper functions
# ------------------------------------------------------------------------------

function sync_music () {
  rsync -avzh rtorrent@rocket:/home/rtorrent/downloads/ ~/Music/
}

# Download a file with rtorrent. Copies argument with scp to kryten.
function rtorrent () {
  scp $1 whatcd@kryten:~/torrents/
}

# The browseimg function takes files in $1, and, if 1 is pressed, copies
# them into the directory given at $2. It uses feh for browsing and sorting.
# browseimg $1 $2
# browseimg . ~/favyiff/
function browseimg () {
  feh -Z --action1 "cp -v %n $2" --action2 "rm $2/%n" $1
}

# Same kind of feh function, just one that randomizes the input filelist
function browseimgr () {
  feh -Zz --action1 "cp -v %n $2" --action2 "rm $2/%n" $1
}

function sync_dropbox_music () {
  # Trailing slash vital, copies contents of dir
  local host=sensae@kryten
  local source=/home/sensae/music/
  local destination=$HOME/Dropbox/Music
  local network_transfer=true
  if grep -Fxq "kryten" /etc/hostname; then
    echo "Host is kryten, local operation mode."
    network_transfer=false;
  else
    echo "Host is not kryten, remote operation mode."
  fi

  # Check that the source exists, either on the remote host or locally
  if [ "$network_transfer" = true ]; then
    if ssh $host test ! -d $source; then
      echo "Directory $source on $host does not exist, not copying files.."
      return;
    fi
  elif [ ! -d $source ]; then
    echo "Directory $source does not exist, not copying files.."
    return;
  fi

  # Check that the destination exists
  if [ ! -d $destination ]; then
    echo "Directory $destination does not exist, not copying files.."
    return;
  fi

  # Perform copy
  if [ "$network_transfer" = true ]; then
    echo "Syncing $host:$source to $destination: "
    rsync -vazh $host:$source $destination
  else
    echo "Syncing $source to $destination: "
    rsync -vazh $source $destination
  fi
}

function template () {
  local target=$HOME/Templates/$1
  local working_dir=$(pwd)
  if [[ $# -eq 1 ]] && [ -e $target ]; then
    echo "Copying $target to $working_dir"
    cp $target $working_dir
  else
    echo "General failure copying template."
  fi
}

function todo () {
  if [ -e "todo.txt" ]; then
    echo "\033[32mFound todo.txt:\033[0m"
    sed -n 's/^/ \* /p' todo.txt
  fi
}

alias vitodo="vim todo.txt"

alias dcrun="dc-tool-ip -t dreamcast.homebrew -x "

function greptodo () {
  grep -IR "#TODO" .
}

function findtodo () {
  find . -name "todo.txt" -exec sh -c 'echo "\n{}"; sed -n "s/^/ \* /p" {}' \;
}

function needs () {
  if [ ! -e "todo.txt" ]; then
    touch todo.txt
  fi
  if [ -n "$1" ]; then
    echo "Appending to todo.txt: $@"
    echo "$@" >> todo.txt
  fi
}

# ------------------------------------------------------------------------------
## General functions
# ------------------------------------------------------------------------------

# General clean function, cleans up intermediate files such as .pyc, .swp and .o
function clean {
  echo -e $(yellow "Cleaning .pyc files..")
  find . -name '*.pyc' -print -exec rm {} \;
  echo -e $(yellow "Cleaning vim .swp files..")
  find . -name '*.swp' -print -exec rm {} \;
  echo -e $(yellow "Cleaning C/C++ object files..")
  find . -name '*.o'   -print -exec rm {} \;
  echo -e $(green "Directory clean finished!")
}

# ------------------------------------------------------------------------------
## Ruby functions
# ------------------------------------------------------------------------------

RUBY_LIB="$MY_RUBY_HOME/lib/ruby/"

# Searches locally installed ruby standard library for files
function rbfind {
  echo "Looking for *$1*.rb files in $RUBY_LIB"
  find $RUBY_LIB -name "*$1*.rb" -printf '%h/\033[1;32m%f\033[0m\n'
}

# Greps through locally installed ruby standard library files for string
function rbgrep {
  echo "Grepping through files in $RUBY_LIB for pattern $1"
  grep -inR $1 $RUBY_LIB
}

# ------------------------------------------------------------------------------
## System administration aliases
# ------------------------------------------------------------------------------

case $OS in
  linux)
    case $DISTRO in
      debian)
        alias i="sudo aptitude install"
        alias s="aptitude search"
        alias u="sudo aptitude upgrade"
      ;;
      arch)
        alias i="sudo pacman -S"
        alias s="pacman -Ss"
        alias u="sudo pacman -Syyu; pacman -Qu | wc -l > ~/.paccount"
        alias setdefault="xdg-mime default"
        alias aurdir="cd /var/abs/local"
        alias wifi="sudo wifi-menu wlp4s0"
      ;;
    esac
  ;;
  darwin)
    alias i="brew install"
    alias s="brew search"
    alias u="brew update"
  ;;
esac

# ------------------------------------------------------------------------------
## Non-System Aliases
# ------------------------------------------------------------------------------

#general
case $OS in
  linux)
    alias ls="ls -F --color"
    alias la="ls -aF --color"
    alias ll="ls -lF --color"
    alias lla="ls -alF --color"
    alias lh="ls -lFh"
    alias kr="keyringer"
  ;;
  darwin)
    alias ls="ls -FG"
    alias la="ls -aFG"
    alias ll="ls -lFG"
    alias lla="ls -alFG"
    alias lh="ls -lFh"
  ;;
esac

#feh for many images (randomized order)
alias fehthumb="feh -tFZz"

#zsh
alias vizsh="vim ~/.zshrc"
alias lesszsh="less ~/.zshrc"
alias loadzsh="source ~/.zshrc"

alias encmount="encfs $HOME/Dropbox/encrypted $HOME/enc"
alias gpgls="gpg --list-keys"
alias gpgsls=" gpg --list-secret-keys"
alias clip="xclip -sel clip"
alias tmux="tmux -2"
alias templates="ls ~/Templates"
alias dirsizes="du -h --max-depth=1"

#git
alias gitss="git status -s"
alias gits="git status"
alias push="git push"
alias pushmaster="git push origin master"
alias pull="git pull"
alias pullmaster="git pull origin master"
alias gitb="git branch"
alias gita="git add"
alias gitc="git commit"
alias gdiff="git diff"
alias gdiffc="git diff --cached"
alias gdiffs="git diff --stat"
alias gdiffsc="git diff --cached --stat"
glog_settings="--oneline --graph --decorate"
alias glog="git log $glog_settings"
alias gloga="git log $glog_settings --all"
alias glogv="git log $glog_settings --shortstat"

#android
alias rootadb="adb kill-server; sudo ~sensae/opt/android-studio/sdk/platform-tools/adb start-server"

#rvm
alias rubies="rvm list"
alias gemset="rvm gemset"
alias gemsets="rvm gemset list"
alias newgemset="rvm gemset create"
alias usegemset="rvm gemset use"

#rails
alias dbnuke="rake db:drop; rake db:create; rake db:migrate; rake db:test:prepare"
alias dbup="rake db:migrate; rake db:test:prepare"

#network analysis
alias locals="nmap -sP"

### Added by the Heroku Toolbelt
if [ -d /usr/local/heroku ]; then
  export PATH="$PATH:/usr/local/heroku/bin"
fi


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
#    eval "$__conda_setup"
#else
#    if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
#        . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
#    else
#        export PATH="/opt/homebrew/anaconda3/bin:$PATH"
#    fi
#fi
#unset __conda_setup
# <<< conda initialize <<<

# Apple Development Stuff
alias rmhelpcache="killall helpd; rm -rf ~/Library/Preferences/com.apple.help* ~/Library/Caches/com.apple.help*"
source /Users/madeline/.cargo/env
